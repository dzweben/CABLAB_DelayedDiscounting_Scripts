"alone"    = "#C6C6C6"   # light balanced gray
)
# 4. Normalize proportions so they sum to 1 within each age group
df_long <- df_long %>%
group_by(age_group) %>%
mutate(proportion = proportion / sum(proportion)) %>%
ungroup()
# 5. Plot
ggplot(df_long, aes(x = age_index, y = proportion, fill = crime_type)) +
# Bars behind
geom_bar(stat = "identity", aes(alpha = ifelse(crime_type == "alone", 0.6, 1)),
position = "stack", color = NA, width = 0.6) +
scale_fill_manual(values = crime_colors, name = "Crime Type") +
scale_alpha_identity() +
# Lines on top
geom_line(data = df, aes(x = age_index, y = social),
inherit.aes = FALSE, color = "black", size = 0.8) +
geom_line(data = df, aes(x = age_index, y = group),
inherit.aes = FALSE, color = "gray30", size = 0.8) +
# Axes
scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
scale_x_continuous(
breaks = df$age_index,
labels = levels(df$age_group),
name = "Age Group"
) +
# Labels and theme
labs(
title = "Proportion of Crime Types by Age Group",
y = "Proportion of Crimes"
) +
theme_minimal(base_size = 12) +
theme(
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11),
axis.title = element_text(size = 12),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 11)
)
# Chunk 1
ncvs_df <- read.csv("/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/theft_ncvs_data.csv")  # read CSV into dataframe
# Chunk 2
all(ncvs_df$age_cooffense == ncvs_df$youngest_multiple)  # check if all values in age_cooffense match youngest_multiple
# Chunk 3
# Trim whitespace from all character columns
ncvs_df[] <- lapply(ncvs_df, function(col) {
if (is.character(col)) trimws(col) else col
})
#### convert N/A's to actual NA values.
ncvs_df[ncvs_df == "N/A"] <- NA
# Chunk 4
age_levels <- c("under_12", "12-14", "15-17", "18-20", "21-29", "30+")
# Fix: If one is NA and the other is valid, copy the valid value over
only_oldest <- is.na(ncvs_df$youngest_multiple) & ncvs_df$oldest_multiple %in% age_levels
only_youngest <- is.na(ncvs_df$oldest_multiple) & ncvs_df$youngest_multiple %in% age_levels
ncvs_df$youngest_multiple[only_oldest] <- ncvs_df$oldest_multiple[only_oldest]
ncvs_df$oldest_multiple[only_youngest] <- ncvs_df$youngest_multiple[only_youngest]
# Chunk 5
# Load libraries
if (!require("flextable")) install.packages("flextable")
if (!require("officer")) install.packages("officer")
library(flextable)
library(officer)
# Define valid age levels
age_levels <- c("under_12", "12-14", "15-17", "18-20", "21-29", "30+")
# Get valid co-offense rows
cooffense_rows <- which(ncvs_df$age_cooffense %in% age_levels)
oldest_vals <- ncvs_df$oldest_multiple[cooffense_rows]
youngest_vals <- ncvs_df$youngest_multiple[cooffense_rows]
valid_rows <- which(oldest_vals %in% age_levels & youngest_vals %in% age_levels)
# Compute age group differences
oldest <- factor(oldest_vals[valid_rows], levels = age_levels, ordered = TRUE)
youngest <- factor(youngest_vals[valid_rows], levels = age_levels, ordered = TRUE)
age_diff <- abs(as.numeric(oldest) - as.numeric(youngest))
total_valid_rows <- length(valid_rows)
# Build data
gap_counts <- table(age_diff[age_diff >= 2])
names(gap_counts) <- paste0(names(gap_counts), " groups apart")
gap_df <- data.frame(
`Gap Size` = names(gap_counts),
`Number of Co-Offenses` = as.integer(gap_counts)
)
# Add totals
gap_df[nrow(gap_df) + 1, ] <- c("Total with Age Gap (â‰¥2 groups)", sum(gap_counts))
gap_df[nrow(gap_df) + 1, ] <- c("Proportion of Total", sprintf("%.4f", sum(gap_counts) / total_valid_rows))
# Build APA-style flextable
ft <- flextable(gap_df) |>
autofit() |>
theme_booktabs() |>
border_remove() |>
align(align = "center", part = "all") |>
fontsize(size = 11, part = "all") |>
padding(padding = 3, part = "all") |>
border(i = 2, j = 1:2, border.top = fp_border(width = 1)) |>   # line above first data row
border(i = nrow(gap_df), j = 1:2, border.bottom = fp_border(width = 1))  # bottom line
# Save to Word
doc <- read_docx() |> body_add_flextable(ft)
print(doc, target = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/Age_Gap_Cooffense_Table.docx")
# Chunk 6
# Load required packages
if (!require("officer")) install.packages("officer")
if (!require("flextable")) install.packages("flextable")
library(officer)
library(flextable)
# 1. Define valid age groups
age_levels <- c("under_12", "12-14", "15-17", "18-20", "21-29", "30+")
# 2. Filter valid co-offense rows
valid_rows <- which(
ncvs_df$oldest_multiple %in% age_levels &
ncvs_df$youngest_multiple %in% age_levels
)
# 3. Build directional co-offense pairings (both directions)
pair_list <- list()
for (i in valid_rows) {
a1 <- ncvs_df$oldest_multiple[i]
a2 <- ncvs_df$youngest_multiple[i]
pair_list[[length(pair_list) + 1]] <- c(a1, a2)
pair_list[[length(pair_list) + 1]] <- c(a2, a1)
}
# 4. Convert to data frame
pair_df <- as.data.frame(do.call(rbind, pair_list))
colnames(pair_df) <- c("offender", "co_with")
# 5. Create frequency table
pair_counts <- table(
factor(pair_df$offender, levels = age_levels),
factor(pair_df$co_with, levels = age_levels)
)
# 6. Row-normalize to get percentages
pair_percents <- round(prop.table(pair_counts, margin = 1) * 100, 1)
# 7. Format with % signs
pair_percent_labels <- apply(pair_percents, c(1, 2), function(x) paste0(x, "%"))
# 8. Convert to data frame
ncvs_pairing_df <- as.data.frame.matrix(pair_percent_labels)
# 9. Rename rows and columns for clarity
rownames(ncvs_pairing_df) <- paste("Offender:", rownames(ncvs_pairing_df))
colnames(ncvs_pairing_df) <- paste("CoWith:", colnames(ncvs_pairing_df))
# 10. Format as APA-style table and save to Word
apa_table <- flextable::flextable(ncvs_pairing_df)
apa_table <- autofit(apa_table)
apa_table <- fontsize(apa_table, size = 11, part = "all")
apa_table <- font(apa_table, fontname = "Times New Roman", part = "all")
apa_table <- set_table_properties(apa_table, layout = "autofit")
apa_table <- border_remove(apa_table)
apa_table <- border(apa_table, i = 1, border.top = fp_border(color = "black", width = 1))
apa_table <- border(apa_table, i = nrow(ncvs_pairing_df), border.bottom = fp_border(color = "black", width = 1))
apa_table <- line_spacing(apa_table, space = 1.15, part = "body")
# 11. Export to Word
doc <- read_docx()
doc <- body_add_par(doc, "Table X\nCo-Offense Age Pairing Matrix", style = "centered")
doc <- body_add_flextable(doc, apa_table)
print(doc, target = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/cooffense_pairing_matrix.docx")
# Chunk 7
# Load required packages
if (!require("flextable")) install.packages("flextable")
if (!require("officer")) install.packages("officer")
library(flextable)
library(officer)
# Define valid age group levels
age_levels <- c("under_12", "12-14", "15-17", "18-20", "21-29", "30+")
# Define logic for each type
group_rows <- ncvs_df$solo_group_crime == "group"
final_alone_rows <- with(ncvs_df,
solo_group_crime == "solo" &
(others_help == "yes" | is.na(others_help))
)
observed_rows <- with(ncvs_df,
solo_group_crime == "solo" &
others_present == "yes" &
others_help == "no"
)
# Count age groups
alone_counts    <- table(factor(ncvs_df$age_solo[final_alone_rows],     levels = age_levels))
group_counts    <- table(factor(ncvs_df$age_cooffense[group_rows],      levels = age_levels))
observed_counts <- table(factor(ncvs_df$age_solo[observed_rows],        levels = age_levels))
# Build base table
ncvs_calc_1 <- data.frame(
age_group = age_levels,
alone     = as.integer(alone_counts),
group     = as.integer(group_counts),
observed  = as.integer(observed_counts)
)
# Add grand_total column
ncvs_calc_1$grand_total <- rowSums(ncvs_calc_1[, c("alone", "group", "observed")], na.rm = TRUE)
# Add total row
total_row <- data.frame(
age_group   = "Total",
alone       = sum(ncvs_calc_1$alone, na.rm = TRUE),
group       = sum(ncvs_calc_1$group, na.rm = TRUE),
observed    = sum(ncvs_calc_1$observed, na.rm = TRUE),
grand_total = sum(ncvs_calc_1$grand_total, na.rm = TRUE)
)
# Bind total row to bottom
ncvs_calc_1 <- rbind(ncvs_calc_1, total_row)
# Format as APA-style flextable
ft <- flextable(ncvs_calc_1) |>
theme_booktabs() |>
autofit() |>
align(j = 2:5, align = "center", part = "all") |>
set_header_labels(
age_group = "Age Group",
alone = "Alone",
group = "Group",
observed = "Observed",
grand_total = "Total"
)
# Save to Word doc in target folder
save_as_docx(
"Table X. Crime Count Distribution by Age Group and Type (Method 2)" = ft,
path = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/ncvs_calc_1_og.docx"
)
# Chunk 8
# Load required packages
if (!require("flextable")) install.packages("flextable")
if (!require("officer")) install.packages("officer")
library(flextable)
library(officer)
# Drop the total row before calculating row-wise percentages
ncvs_calc_1_no_total <- ncvs_calc_1[ncvs_calc_1$age_group != "Total", ]
# Compute percentages across the row (alone, group, observed as % of grand_total)
ncvs_calc_1_percentages <- ncvs_calc_1_no_total
ncvs_calc_1_percentages[, c("alone", "group", "observed")] <- round(
ncvs_calc_1_no_total[, c("alone", "group", "observed")] / ncvs_calc_1_no_total$grand_total * 100
)
# Optional: add % signs for display
ncvs_calc_1_percentages[, c("alone", "group", "observed")] <- apply(
ncvs_calc_1_percentages[, c("alone", "group", "observed")],
c(1, 2),
function(x) paste0(x, "%")
)
# Keep only the relevant columns
ncvs_calc_1_percentages <- ncvs_calc_1_percentages[, c("age_group", "alone", "group", "observed")]
# Format as APA-style flextable
ft <- flextable(ncvs_calc_1_percentages) |>
theme_booktabs() |>
autofit() |>
align(j = 2:4, align = "center", part = "all") |>
set_header_labels(
age_group = "Age Group",
alone = "Alone (%)",
group = "Group (%)",
observed = "Observed (%)"
)
# Save to Word doc
save_as_docx(
"Table X. Proportion of Crime Types by Age Group" = ft,
path = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/og-ncvs_calc_1_percentages.docx"
)
# Chunk 9
# Load required packages
if (!require("flextable")) install.packages("flextable")
if (!require("officer")) install.packages("officer")
library(flextable)
library(officer)
# 1. Remove "Total" row
df <- ncvs_calc_1[ncvs_calc_1$age_group != "Total", ]
# 2. Construct matrix: alone vs not alone
alone_matrix <- cbind(
alone = df$alone,
not_alone = df$grand_total - df$alone
)
rownames(alone_matrix) <- df$age_group
# 3. Omnibus chi-squared test
chi_total <- chisq.test(alone_matrix)
# 4. Initialize results list
pairwise_results <- list()
age_combos <- combn(rownames(alone_matrix), 2, simplify = FALSE)
# 5. Pairwise chi-squared or Fisherâ€™s exact tests + Phi
for (combo in age_combos) {
sub_table <- alone_matrix[combo, ]
n <- sum(sub_table)
test <- chisq.test(sub_table)
use_fisher <- any(test$expected < 5)
if (use_fisher) {
stat <- NA
df_val <- NA
phi_val <- NA
p_val <- fisher.test(sub_table)$p.value
} else {
stat <- test$statistic
df_val <- test$parameter
phi_val <- round(sqrt(stat / n), 3)
p_val <- test$p.value
}
pairwise_results[[length(pairwise_results) + 1]] <- data.frame(
age_group_1 = combo[1],
age_group_2 = combo[2],
chi_sq = round(stat, 3),
df = df_val,
phi = phi_val,
p_value = round(p_val, 4),
p_bonferroni = NA  # placeholder
)
}
# 6. Combine pairwise results
pairwise_chi_df <- do.call(rbind, pairwise_results)
# 7. Apply Bonferroni correction
pairwise_chi_df$p_bonferroni <- round(p.adjust(pairwise_chi_df$p_value, method = "bonferroni"), 4)
# 8. Add omnibus test row (same columns)
chi_total_row <- data.frame(
age_group_1 = "ALL",
age_group_2 = "vs. all",
chi_sq = round(chi_total$statistic, 3),
df = chi_total$parameter,
phi = NA,
p_value = round(chi_total$p.value, 4),
p_bonferroni = NA
)
# 9. Combine and sort full results by p-value
chi_results <- rbind(chi_total_row, pairwise_chi_df)
chi_results <- chi_results[order(chi_results$p_value), ]
rownames(chi_results) <- NULL
# 10. Rename columns for APA presentation
colnames(chi_results) <- c(
"Age Group 1", "Age Group 2", "Chi-Square (Ï‡Â²)", "df", "Phi", "p", "p (Bonferroni)"
)
# 11. Format and export APA-style table
ft <- flextable(chi_results) |>
theme_booktabs() |>
autofit() |>
align(part = "all", align = "center") |>
bold(i = 1, bold = TRUE)
# 12. Save to Word doc
save_as_docx(
"Table X. Chi-Square Tests of Solo Crime by Age Group" = ft,
path = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/og-chi_squared_table.docx"
)
# Chunk 10
# Load required packages
if (!require("broom")) install.packages("broom")
if (!require("flextable")) install.packages("flextable")
if (!require("officer")) install.packages("officer")
library(broom)
library(flextable)
library(officer)
# 1. Remove "Total" row and set 15â€“17 as reference group
df <- ncvs_calc_1[ncvs_calc_1$age_group != "Total", ]
df$age_group <- factor(df$age_group, levels = c("15-17", "under_12", "12-14", "18-20", "21-29", "30+"))
# 2. Fit logistic regression: alone vs. not alone
model <- glm(cbind(alone, grand_total - alone) ~ age_group, data = df, family = binomial)
# 3. Tidy output into readable odds ratios and confidence intervals
model_output <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
# 4. Round numeric values to 2 decimal places
model_output$estimate <- round(model_output$estimate, 2)
model_output$std.error <- round(model_output$std.error, 2)
model_output$statistic <- round(model_output$statistic, 2)
model_output$p.value <- round(model_output$p.value, 4)
model_output$conf.low <- round(model_output$conf.low, 2)
model_output$conf.high <- round(model_output$conf.high, 2)
# 5. Rename Intercept row to clarify reference group
model_output$term[model_output$term == "(Intercept)"] <- "Intercept (15â€“17)"
# 6. Rename columns for APA-style display
colnames(model_output) <- c("Age Group", "Odds Ratio", "Std. Error", "z", "p", "CI Lower", "CI Upper")
# 7. Format and save as Word table
ft <- flextable(model_output) |>
autofit() |>
theme_booktabs() |>
set_table_properties(layout = "autofit") |>
fontsize(size = 11, part = "all") |>
line_spacing(space = 1.15)
# 8. Export to .docx
save_as_docx(
"Logistic Regression Results (Solo Offending by Age Group)" = ft,
path = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/og-15-17int-logistic_regression_solo_offending.docx"
)
# Chunk 11
# Load required packages
if (!require("broom")) install.packages("broom")
if (!require("flextable")) install.packages("flextable")
if (!require("officer")) install.packages("officer")
library(broom)
library(flextable)
library(officer)
# 1. Remove "Total" row and set 12â€“14 as reference group
df <- ncvs_calc_1[ncvs_calc_1$age_group != "Total", ]
df$age_group <- factor(df$age_group, levels = c("12-14", "under_12", "15-17", "18-20", "21-29", "30+"))
# 2. Fit logistic regression: ALONE vs. not-alone (group + observed)
model <- glm(cbind(alone, grand_total - alone) ~ age_group, data = df, family = binomial)
# 3. Tidy output and exponentiate
model_output <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
# 4. Round all numeric fields
model_output$estimate   <- round(model_output$estimate, 2)
model_output$std.error  <- round(model_output$std.error, 2)
model_output$statistic  <- round(model_output$statistic, 2)
model_output$p.value    <- round(model_output$p.value, 4)
model_output$conf.low   <- round(model_output$conf.low, 2)
model_output$conf.high  <- round(model_output$conf.high, 2)
# 5. Rename intercept for clarity
model_output$term[model_output$term == "(Intercept)"] <- "Intercept (12â€“14)"
# 6. Create and format flextable
ft <- flextable(model_output)
ft <- autofit(ft)
ft <- theme_booktabs(ft)
ft <- fontsize(ft, size = 11, part = "all")
# 7. Save to Word doc
ft <- flextable(model_output)
ft <- autofit(ft)
ft <- theme_booktabs(ft)
ft <- align(ft, align = "center", part = "all")
doc <- read_docx()
doc <- body_add_par(doc, "Logistic Regression: Odds of Solo Offending (Reference = Age 12â€“14)", style = "heading 1")
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/og-12-14-int-logistic_regression_solo_offending.docx")
# Chunk 12
# Load required packages
if (!require("broom")) install.packages("broom")
if (!require("officer")) install.packages("officer")
if (!require("flextable")) install.packages("flextable")
library(broom)
library(officer)
library(flextable)
# 1. Remove "Total" row and set 18â€“20 as reference group
df <- ncvs_calc_1[ncvs_calc_1$age_group != "Total", ]
df$age_group <- factor(df$age_group, levels = c("18-20", "under_12", "12-14", "15-17", "21-29", "30+"))
# 2. Fit logistic regression: alone vs. not alone
model <- glm(cbind(alone, grand_total - alone) ~ age_group, data = df, family = binomial)
# 3. Tidy output into readable odds ratios and confidence intervals
model_output <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
# 4. Round output for clarity
model_output$estimate   <- round(model_output$estimate, 2)
model_output$std.error  <- round(model_output$std.error, 2)
model_output$statistic  <- round(model_output$statistic, 2)
model_output$p.value    <- round(model_output$p.value, 4)
model_output$conf.low   <- round(model_output$conf.low, 2)
model_output$conf.high  <- round(model_output$conf.high, 2)
# 5. Rename Intercept row to clarify reference group
model_output$term[model_output$term == "(Intercept)"] <- "Intercept (18â€“20)"
# 6. Rename columns for APA-style output
colnames(model_output) <- c("Age Group", "Odds Ratio", "SE", "Z", "p", "CI Lower", "CI Upper")
# 7. Convert to flextable
ft <- flextable(model_output)
ft <- autofit(ft)
ft <- theme_booktabs(ft)
ft <- align(ft, align = "center", part = "all")
ft <- set_table_properties(ft, layout = "autofit")
# 8. Export to Word
save_as_docx(
"Logistic Regression Results (Reference = 18â€“20)" = ft,
path = "/Users/dannyzweben/Desktop/CABLAB_Files/ncvs/theft/R_tables/og-18-20-int-logistic_regression_solo_offending.docx"
)
# Load libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
# 1. Convert percentage strings to numeric
df <- ncvs_calc_1_percentages %>%
mutate(across(-age_group, ~ as.numeric(sub("%", "", .)) / 100))
# 2. Factor age groups and compute social crimes
df <- df %>%
mutate(
age_group = factor(age_group, levels = c("under_12", "12-14", "15-17", "18-20", "21-29", "30+")),
social = group + observed,
age_index = as.numeric(age_group)  # numeric x for line alignment
)
# 3. Convert to long format and set stacking order
df_long <- df %>%
pivot_longer(cols = c("observed", "group", "alone"),
names_to = "crime_type", values_to = "proportion") %>%
mutate(
crime_type = factor(crime_type, levels = c("alone", "observed", "group")),
age_index = rep(df$age_index, each = 3)  # to align with x
)
crime_colors <- c(
"group"    = "#8FCB9B",  # soft leafy green, pleasant and modern
"observed" = "#88AEE0",  # same airy cornflower blue
"alone"    = "#C6C6C6"   # light balanced gray
)
# 4. Normalize proportions so they sum to 1 within each age group
df_long <- df_long %>%
group_by(age_group) %>%
mutate(proportion = proportion / sum(proportion)) %>%
ungroup()
# 5. Plot
ggplot(df_long, aes(x = age_index, y = proportion, fill = crime_type)) +
# Bars behind
geom_bar(stat = "identity", aes(alpha = ifelse(crime_type == "alone", 0.6, 1)),
position = "stack", color = NA, width = 0.6) +
scale_fill_manual(values = crime_colors, name = "Crime Type") +
scale_alpha_identity() +
# Lines on top
geom_line(data = df, aes(x = age_index, y = social),
inherit.aes = FALSE, color = "black", size = 0.8) +
geom_line(data = df, aes(x = age_index, y = group),
inherit.aes = FALSE, color = "gray30", size = 0.8) +
# Axes
scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
scale_x_continuous(
breaks = df$age_index,
labels = levels(df$age_group),
name = "Age Group"
) +
# Labels and theme
labs(
title = "Proportion of Crime Types by Age Group",
y = "Proportion of Crimes"
) +
theme_minimal(base_size = 12) +
theme(
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11),
axis.title = element_text(size = 12),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 11)
)
